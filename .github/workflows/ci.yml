name: Release Creation

on:
  push:
    tags:
      - '*'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: Extract version from tag without the v
        id: get-version
        run: echo "v=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: module.json
        env:
          version: ${{ steps.get-version.outputs.v }}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

      - name: Install packages
        run: yarn install

      - name: Build distribution
        run: yarn run build

      # Create a zip file with all files required by the module to add to the release.
      - name: Bundle into ZIP file
        run: zip -r ./module.zip module.json assets/ dist/ lang/ packs/ LICENSE

      # Generate changelog
      - run: awk '/^## /{p++} p==2{exit} p>=1' ./CHANGELOG.md >> body.md

      # Create a release for this specific version.
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases.
          name: ${{ github.event.release.name }}
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
          artifacts: './module.json, ./module.zip'
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          token: '${{secrets.RELEASE_TOKEN}}'
          bodyFile: body.md
